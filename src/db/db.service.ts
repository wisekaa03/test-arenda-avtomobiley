import {
  Inject,
  Injectable,
  Logger,
  OnApplicationBootstrap,
} from '@nestjs/common';
import { Client, ClientConfig, QueryResult } from 'pg';
import { PG_CLIENT } from './db.constants';
import { Car } from '../graphql/models/car.model';

@Injectable()
export class DbService implements OnApplicationBootstrap {
  private logger = new Logger(DbService.name);
  public pgClient: Client;

  constructor(@Inject(PG_CLIENT) private readonly options: ClientConfig) {
    this.pgClient = new Client(options);
  }

  private log(query: QueryResult) {
    let log = `command: ${query.command}`;
    if (query.rowCount) {
      log += ` rowCount: ${query.rowCount} rows: ${JSON.stringify(query.rows)}`;
    }
    this.logger.log(log);
  }

  async onApplicationBootstrap() {
    await this.pgClient.connect();

    let query = await this.pgClient.query('DROP TABLE IF EXISTS car CASCADE');
    this.log(query);

    query = await this.pgClient.query('DROP TABLE IF EXISTS rental CASCADE');
    this.log(query);

    query = await this.pgClient.query(
      'CREATE TABLE car (\
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\
        brand VARCHAR(128),\
        model VARCHAR(128),\
        licensePlate VARCHAR(64),\
        vin VARCHAR(64)\
      )',
    );
    this.log(query);

    query = await this.pgClient.query(
      'CREATE TABLE rental (\
        id BIGINT PRIMARY KEY,\
        car_id BIGINT,\
        dateStart DATE,\
        dateEnd DATE,\
        price INT\
      )',
    );
    this.log(query);

    query = await this.pgClient.query(
      'ALTER TABLE ONLY rental ADD CONSTRAINT car_fk FOREIGN KEY (car_id) REFERENCES car',
    );
    this.log(query);

    // Заполняем автомобили
    await this.insertCar('Lada', 'Niva', 'a111aa123', 'XUUUF756170002811');
    await this.insertCar('Lada', 'Vesta', 'a112aa123', 'XUUUF756370002812');
    await this.insertCar('Lada', 'Priora', 'a114aa123', 'XUUUF256170002814');
    await this.insertCar('Lada', 'Hell', 'a115aa123', 'XUUUF756170002815');
    await this.insertCar('VAZ', 'Buhanka', 'a113aa123', 'XUUUF256170002813');
  }

  async insertCar(
    brand: string,
    model: string,
    licensePlate: string,
    vin: string,
  ): Promise<void> {
    const query = await this.pgClient.query(
      `INSERT INTO car (brand, model, licensePlate, vin) VALUES ('${brand}', '${model}', '${licensePlate}', '${vin}')`,
    );
    this.log(query);
  }

  async listCars(): Promise<Car[]> {
    const query = await this.pgClient.query<Car>(`SELECT * FROM car`);
    this.log(query);

    return query.rows;
  }
}
